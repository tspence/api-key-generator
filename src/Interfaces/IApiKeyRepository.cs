using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ApiKeyGenerator.Interfaces
{
    /// <summary>
    /// Represents an interface to whatever storage system you use.
    ///
    /// Your storage system must be able to persist API keys and retrieve them on demand.
    /// </summary>
    public interface IApiKeyRepository
    {
        /// <summary>
        /// Implement this method to fetch API keys from your repository by their unique GUID.
        /// </summary>
        /// <param name="id">The GUID of the API key to fetch.</param>
        /// <returns>The API key fetched from your persistence layer, or null if not found.</returns>
        Task<IPersistedApiKey> GetKey(Guid id);
        
        /// <summary>
        /// Implement this method to store API keys after they are generated by the software.
        /// </summary>
        /// <param name="key">The key that you should save in your repository.</param>
        /// <returns>True if your persistence layer successfully saved the API key.</returns>
        Task<bool> SaveKey(IPersistedApiKey key);
        
        /// <summary>
        /// Implement this method to define multiple algorithms supported by your software.
        /// If this method returns null, the software will only support ApiKeyAlgorithm.Default. 
        /// </summary>
        /// <returns>The list of algorithms your software wishes to support, or null to use the default only.</returns>
        IEnumerable<ApiKeyAlgorithm> GetSupportedAlgorithms();
        
        /// <summary>
        /// Implement this method to return the currently defined API key generation algorithm.
        /// If this method returns null, the software will use ApiKeyAlgorithm.Default. 
        /// </summary>
        /// <returns>The algorithm to use when generating new API keys, or null to use the default.</returns>
        ApiKeyAlgorithm GetNewKeyAlgorithm();
    }
}